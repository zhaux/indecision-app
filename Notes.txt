Lecture 2
- why should you learn React?
	- small learning curve (builds on JavaScript)
	- good community
	- React library
		- core of React is the idea of a component
		- component: piece of user interface
		- reusable, easy to build, easy to debug, easy to test
		- React algorithms are really fast


Lecture 6
- build the Indecision app
	- learn JSX (JavaScript XML), templating language to build the UI for all of the components


Lecture 7
- live-server module
	- development web server
	- features like live reload


Lecture 8
- JSX: JavaScript syntax extension
	- provided by React
- Babel: JavaScript compiler
	- takes features from ES6/ES7 and compiles down to ES5 code
	- takes JSX code and compiles it to ES5 code


Lecture 9 (babel and dependencies setup)
- /src/app.js: contains JSX
- /scripts/app.js: auto-generated file with babel stuff
- live-server public
- babel src/app.js --out-file=public/scripts/app.js --presets=react,env --watch                                            
- to reinstall dependencies: yarn install


Lecture 10 (static JSX)
- adjacent JSX elements must be wrapped in a root element 
- for clarity, use () to wrap elements


Lecture 11
- dynamic JSX
- JS expressions in {}


Lecture 12 (conditional rendering/logic)
- ES6 arrow functions
- if JSX expression resolves to undefined, nothing shows up
- conditional (ternary) operator (true ? 'this' : 'that')
- JSX ignores undefined, null, booleans
- logical 'and' operator:
	- if the first value is truthy and the second value is truthy, it will return the second value
	- if first value is false, it ignores the second value
- ternary operator: use if you want to do 1 of 2 things
- logical 'and' operator: use if just want to do one thing or nothing at all


Lecture 13 (ES6 const, let)
- var has weird quirks and easy to misuse/abuse:
	- you are able to redefine/reassign a variable that is already in use without any errors (cannot redefine with let)
	- with const, you cannot even reassign it
	- var, let, const are function scoped
	- however, let and const are block scoped (if statements, for loops)
- future order:
	- const first
	- let if needed
	- var never


Lecture 14 (ES6 arrow function part 1)
- new syntax for creating functions
- arrow functions are always anonymous (must assign to a variable)
	- const add = (a, b) => {
		return a + b
	};
- arrow functions have a new syntax if the return is just one statement (return statement right after the =>) (implicitly return)
	- const add = (a, b) => a + b


Lecture 15 (ES6 arrow function part 2)
- arrow functions vs ES5 functions differ more than just syntax
- arrow functions:
	- 'arguments' object is no longer bound
	- 'this' keyword is no longer bound
- no reason to use 'function' anymore
- map vs forEach:
	- forEach lets you do something to each element (like print)
	- map lets you transform each item, getting new array back
	- map does not affect the original array at all


Lecture 16 (Events and Attributes)
- some attributes from HTML work exactly the same way, others got renamed
- ex. class -> className (b/c class is a reserved word for classes in ES6)
- can set attributes as a JS expression i.e id={expression} 


Lecture 17 (Manual Data Binding)
- JSX does not have built in data binding
- need to rebuild template and render again on data change
- React is super efficient:
	- uses virtual DOM algorithms in JS to determine the minimal number of changes needed to be made in order to correctly render the new application


Lecture 18 (Forms and Inputs)
- e.preventDefault(): to prevent form submit from doing a full page reload
- e.target.elements.option.value: to get value of text field


Lecture 19 (Arrays in JSX)
- arrays are supported by JSX
- can have array of JSX instead JSX
- use 'map' to build array of JSX expressions
- each element must have 'key' attribute so that React knows what element might be changed during new render


Lecture 23 (Thinking in React)
- breaking things up into components (small reusable chunks)
- ex. twitter header (<Header />)
- ES6 class syntax


Lecture 24 (ES6 Classes - Part 1)
- each class is like a blueprint
- class keyword
- new keyword to make new instance of class
- define constructors for the class
- ES6 method definition syntax - consturctor (unique name, gets implicitly called when you make a new instance)
	- ex: constructor() {
    	}
- can set default arguments by using =
- ES6 template strings: ex. `Hi. I am ${ this.name }`
	- no more needs for manual string concatenations


Lecture 25 (ES6 Classes - Part 2)
- subclasses
- super keyword is used to call parent constructor function


Lecture 26 (Creating a React Component)
- class XX extends React.Component
- class name must start with capital letter
- React components must have method 'render'


Lecture 27 (Nesting Components) 
- components can render other components


Lecture 28 (Component Props)
- props: passing data in our components (very similar as arguments)
- this.props

Lecture 29 (Events & Methods)

Lecture 30 (Method Binding)
- bind keyword
- can use the first argument to set the 'this' context
- event handlers used when you lose the 'this' binding


Lecture 31 (Component State)
- 1. setup default state object
- 2. component rendered with default state values*
- 3. change state based on event
- 4. component re-rendered with new state values*
- 5. start again at (3) 


Lecture 32 (Adding State to Counter App: Part 1)


Lecture 33 (Adding State to Counter App: Part 2)
- this.setState
- only return state that you want to change


Lecture 34 (Alternative setState Syntax)
- old method (might be obsolete in later versions): can pass an object instead of a function as setState parameters
- this.setState is ASYNC
- don't use this method


Lecture 35 (Build It: Adding State to Visibility Toggle)


Lecture 36 (Indecision State: Part 1)
- reverse data flow (child -> parent)
- possible for parent to pass new prop values


Lecture 37 (Indecision State: Part 2)


Lecture 38 (Summary: Props vs State)
- props:
    - an object
    - can be used when rendering
    - changes(from above) causes re-renders
    - comes from above
    - can't be changed by component itself
- state:
    - an object
    - can be used when rendering
    - changes causes re-renders
    - defined in component itself
    - can be changed by component itself


Lecture 39 (Section Intro: Stateless Functional Components)
- stateless functional components vs class based components


Lecture 40 (The Stateless Functional Component)
- alternative to previous class based components
- cannot use 'this' (like arrow functions)
- pass props as first argument
- faster than class based components b/c no overhead like React.Component
- easier to test/read/write


Lecture 41 (Default Prop Values)


Lecture 42 (React Dev Tools)
- chrome extension


Lecture 43 (Removing Individual Options)


Lecture 44 (Lifecycle Methods)
- lifecycle methods: methods that are built-in to react components
- cannot be used in stateless functional based components, only in class based components
- componentDidMount: called when component gets rendered
- componentDidUpdate: fired when component is updated (prop or state values changed)
- componentWillUnmount: fired right before component goes away
- more methods: facebook.github.io/react/docs/react-component.html


Lecture 45 (Saving and Loading Options Data)
- localStorage persists between page loads
- localStorage can only save string data
- use json to save string representation of non-string objects


Lecture 46 (Saving and Loading the Count)


Lecture 47 (Section Intro: Webpack)
- webpack: asset bundler


Lecture 48 (What is Webpack?)
- can break up application code to multiple files and use webpack to bundle everything together
- use webpack to bundle all assets into one js file and load that js file via script tag
-webpack can also run babel for us


Lecture 49 (Avoid Global Modules)
- global modules won't be in the package.json file
- to run live-server/babel, use the "scripts" tag in package.json
- yarn add live-server babel-cli@6.24.1
- yarn run XX


Lecture 50 (Installing & Configuring Webpack)
- yarn add webpack@3.1.0
- by default, webpack does nothing, need config file
- webpack.config.js (node script)
- need: where the entry point it, where to output final bundle file
- 'bundle.js' very common name for webpack
- output path must be absolute path, cannot use relative path (use __dirname + node('path'))


Lecture 51 (ES6 import/export)
- import + relative path of what you want to import
- each file in webpack application maintains their own local scope (so need to use export)
- use {} for import/export (NOT AN OBJECT)
- need to specify named exports to import


Lecture 52 (Default Exports)
- each file (if chosed to) can have up to 1 default export
- to import default export, include the name right before the {} + a comma ','
- for default exports, naming is not important (can be anything you like)
- no hard rule to what to export as default or named
- 'export default' for in-line named export
	- cannot be right before variable declaration
	- reference it in new line


Lecture 53 (Importing npm Modules)
- yarn add validator@8.0.0
- webpack will not include files that are not used in the application
- yarn add react@16.0.0 react-dom@16.0.0
- don't currently have babel connected to webpack so JSX will not work


Lecture 54 (Setting up Babel with Webpack)
- loader: allows you to customize the behaviour of webpack when it loads a file
- yarn add babel-core@6.25.0 (allows you to run babel with tools like webpack)
- yarn babel-loader@7.1.1 (webpack loader)
- webpack modules->rules
- need to make babel config file to tell it to use env,react presets (.babelrc)


Lecture 55 (One Component per File)
- put each component in its own file for scalability, maintence, testing, etc
- for component file naming convention - use the same name as the component name
- for each component, use default export because there's usually only one thing to export
- for component imports, webpack does not need '.js' extension to find the file


Lecture 56 (Source Maps with Webpack)
- source maps make debugging much easier
- webpack.config.js devtool
- development webpack: cheap-module-eval-source-map


Lecture 57 (Webpack Dev Server)
- similar to live-server but has nice-to-have features specific to webpack
- yarn add webpack-dev-server@2.5.1


Lecture 58 (ES6 class Properties)
- babel plugin (transform-class-properties)
- new class properties syntax will not require class constructor method
- yarn add babel-plugin-transform-class-properties@6.24.1
- ability to create functions that won't have their bindings messed up


Lecture 59 (Section Intro: Using a Third-Party Component)
- use 3rd party react-module


Lecture 60 (Passing Children to Component)
- can pass JSX into component


Lecture 61 (Setting up React-Modal)
- yarn add react-modal@2.2.2


Lecture 62 (Bonus: Refactoring Other Stateless Functional Components)
- can just implicity return our JSX in stateless functional components (without using 'return')


Lecture 63 (Section Intro: Styling React)
- focus on adding CSS using SCSS preprocessor
- config webpack to compile SCSS to regular CSS


Lecture 64 (Setting up Webpack with SCSS)
- need css-loader and style-loader for webpack to load css
- yarn add style-loader@0.18.2 css-loader@0.28.4
- need sass loader to compile scss to css
- yarn add sass-loader@6.0.6 node-sass@4.5.3


Lecture 65 (Architecture and Header Styles)
- when creating a separate scss that is loaded in, it's known as a 'partial' and file name starts with underscore '_'
- when importing partial, leave off .scss extension and the underscore '_'
- use rem instead of px (better support for accessibility)
	- allows users to customize things (like global font size)
	- 1rem = 16px
	- convert html page to base 10 rem by font-size: 62.5%
- BEM (block element modifier) naming convention
	- css class naming convention
	- ex. block (header), element (title) => .header__title


Lecture 66 (Reset that $%!*)
- CSS reset: 
	- makes sure all browsers are starting from the same base
	- removed built in styles that come from different browsers, OS, etc
	- cross-browser friendly
- yarn add normalize.css@7.0.0


Lecture 67 (Themeing with Variables)
- SCSS variables must start with $


Lecture 68 (Big Button & Options List)
- sass has built-in functions (ex. darken())
- BEM naming convention:
	- element uses 2 underscores '__'
	- modifiers use 2 hyphens '--'


Lecture 69 (Styling the Options List)


Lecture 70 (Styling Option Item)


Lecture 71 (Styling React-Modal)
